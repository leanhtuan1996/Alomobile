#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('Alomobile:server');
var serverHttp = require('../app').serverHttp;
var serverHttps = require('../app').serverHttps;
var io = require('../routes/io');

/**
 * Get port from environment and store in Express.
 */

var portHttp = normalizePort(process.env.PORT || '3000');
//var portHttps = normalizePort(process.env.PORT || '443');

app.set('portHttp', portHttp);
//app.set('portHttps', portHttps);

/**
 * Listen on provided port, on all network interfaces.
 */

//serverHttps.listen(portHttps);
serverHttp.listen(portHttp);
serverHttp.on('error', onErrorInHTTP);
serverHttp.on('listening', onListeningInHTTP);
//serverHttps.on('error', onErrorInHTTPS);
//serverHttps.on('listening', onListeningInHTTPS);

/**
 * Socket.io
 */

io.attach(serverHttp);
//io.attach(serverHttps)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorInHTTP(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof portHttp === 'string'
    ? 'Pipe ' + portHttp
    : 'Port ' + portHttp;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorInHTTPS(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof portHttps === 'string'
    ? 'Pipe ' + portHttps
    : 'Port ' + portHttps;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningInHTTP() {
  var addr = serverHttp.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.portHttp;
  debug('Listening on ' + bind);
}

function onListeningInHTTPS() {
  var addr = serverHttps.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.portHttps;
  debug('Listening on ' + bind);
}

